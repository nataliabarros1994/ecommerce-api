version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ecommerce_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ecommerce_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB Database
  mongodb:
    image: mongo:7
    container_name: ecommerce_mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DB}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - ecommerce_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Auth Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: auth_service
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - FLASK_ENV=${FLASK_ENV}
    ports:
      - "${AUTH_SERVICE_PORT}:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecommerce_network
    volumes:
      - ./services/auth-service:/app
    command: python run.py

  # User Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: user_service
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - FLASK_ENV=${FLASK_ENV}
    ports:
      - "${USER_SERVICE_PORT}:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecommerce_network
    volumes:
      - ./services/user-service:/app
    command: python run.py

  # Product Service
  product-service:
    build:
      context: ./services/product-service
      dockerfile: Dockerfile
    container_name: product_service
    environment:
      - MONGO_HOST=${MONGO_HOST}
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - MONGO_DB=${MONGO_DB}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - FLASK_ENV=${FLASK_ENV}
    ports:
      - "${PRODUCT_SERVICE_PORT}:5000"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - ecommerce_network
    volumes:
      - ./services/product-service:/app
    command: python run.py

  # Order Service
  order-service:
    build:
      context: ./services/order-service
      dockerfile: Dockerfile
    container_name: order_service
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - FLASK_ENV=${FLASK_ENV}
      - PRODUCT_SERVICE_URL=http://product-service:5000
      - PAYMENT_SERVICE_URL=http://payment-service:5000
    ports:
      - "${ORDER_SERVICE_PORT}:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecommerce_network
    volumes:
      - ./services/order-service:/app
    command: python run.py

  # Payment Service
  payment-service:
    build:
      context: ./services/payment-service
      dockerfile: Dockerfile
    container_name: payment_service
    environment:
      - MONGO_HOST=${MONGO_HOST}
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - MONGO_DB=${MONGO_DB}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - FLASK_ENV=${FLASK_ENV}
    ports:
      - "${PAYMENT_SERVICE_PORT}:5000"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - ecommerce_network
    volumes:
      - ./services/payment-service:/app
    command: python run.py

  # Notification Service
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    container_name: notification_service
    environment:
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_FROM=${SMTP_FROM}
      - FLASK_ENV=${FLASK_ENV}
    ports:
      - "${NOTIFICATION_SERVICE_PORT}:5000"
    networks:
      - ecommerce_network
    volumes:
      - ./services/notification-service:/app
    command: python run.py

  # API Gateway (Nginx)
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api_gateway
    ports:
      - "${API_GATEWAY_PORT}:80"
    depends_on:
      - auth-service
      - user-service
      - product-service
      - order-service
      - payment-service
      - notification-service
    networks:
      - ecommerce_network
    volumes:
      - ./api-gateway/nginx.conf:/etc/nginx/nginx.conf:ro

networks:
  ecommerce_network:
    driver: bridge

volumes:
  postgres_data:
  mongodb_data:
